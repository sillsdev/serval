syntax = "proto3";

package serval.translation.v1;

import "google/protobuf/empty.proto";

service TranslationEngineApi {
    rpc Create(CreateRequest) returns (google.protobuf.Empty);
    rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
    rpc Translate(TranslateRequest) returns (TranslateResponse);
    rpc GetWordGraph(GetWordGraphRequest) returns (GetWordGraphResponse);
    rpc TrainSegmentPair(TrainSegmentPairRequest) returns (google.protobuf.Empty);
    rpc StartBuild(StartBuildRequest) returns (google.protobuf.Empty);
    rpc CancelBuild(CancelBuildRequest) returns (google.protobuf.Empty);
    rpc GetQueueSize(GetQueueSizeRequest) returns (GetQueueSizeResponse);
    rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);
}

message CreateRequest {
    string engine_type = 1;
    string engine_id = 2;
    optional string engine_name = 3;
    string source_language = 4;
    string target_language = 5;
}

message DeleteRequest {
    string engine_type = 1;
    string engine_id = 2;
}

message TranslateRequest {
    string engine_type = 1;
    string engine_id = 2;
    string segment = 3;
    int32 n = 4;
}

message TranslateResponse {
    repeated TranslationResult results = 1;
}

message GetWordGraphRequest {
    string engine_type = 1;
    string engine_id = 2;
    string segment = 3;
}

message GetWordGraphResponse {
    WordGraph word_graph = 1;
}

message TrainSegmentPairRequest {
    string engine_type = 1;
    string engine_id = 2;
    string source_segment = 3;
    string target_segment = 4;
    bool sentence_start = 5;
}

message StartBuildRequest {
    string engine_type = 1;
    string engine_id = 2;
    string build_id = 3;
    optional string options = 4;
    repeated Corpus corpora = 5;
}

message CancelBuildRequest {
    string engine_type = 1;
    string engine_id = 2;
}

message GetQueueSizeRequest {
    string engine_type = 1;
}

message GetQueueSizeResponse {
    int32 size = 1;
}

message AlignedWordPair {
    int32 source_index = 1;
    int32 target_index = 2;
}

message Phrase {
    int32 source_segment_start = 1;
    int32 source_segment_end = 2;
    int32 target_segment_cut = 3;
}

message TranslationSources {
    repeated TranslationSource values = 1;
}

message TranslationResult {
    string translation = 1;
    repeated string source_tokens = 2;
    repeated string target_tokens = 3;
    repeated double confidences = 4;
    repeated TranslationSources sources = 5;
    repeated AlignedWordPair alignment = 6;
    repeated Phrase phrases = 7;
}

message HealthCheckResponse {
    HealthCheckStatus Status = 1;
    string Duration = 2;
    map<string, string> Data = 3;
    optional string Exception = 4;
}

message WordGraphArc {
    int32 prev_state = 1;
    int32 next_state = 2;
    double score = 3;
    repeated string target_tokens = 4;
    repeated double confidences = 5;
    int32 source_segment_start = 6;
    int32 source_segment_end = 7;
    repeated AlignedWordPair alignment = 8;
    repeated TranslationSources sources = 9;
}

message WordGraph {
    repeated string source_tokens = 1;
    double initial_state_score = 2;
    repeated int32 final_states = 3;
    repeated WordGraphArc arcs = 4;
}

message Corpus {
    string id = 1;
    string source_language = 2;
    string target_language = 3;
    bool train_on_all = 4;
    bool pretranslate_all = 5;
    repeated string train_on_text_ids = 6;
    repeated string pretranslate_text_ids = 7;
    repeated CorpusFile source_files = 8;
    repeated CorpusFile target_files = 9;
}

message CorpusFile {
    string location = 1;
    FileFormat format = 2;
    string text_id = 3;
}

enum FileFormat {
    FILE_FORMAT_TEXT = 0;
    FILE_FORMAT_PARATEXT = 1;
}

enum TranslationSource {
    TRANSLATION_SOURCE_PRIMARY = 0;
    TRANSLATION_SOURCE_SECONDARY = 1;
    TRANSLATION_SOURCE_HUMAN = 2;
}

enum HealthCheckStatus {
    Unhealthy = 0;
    Degraded = 1;
    Healthy = 2;
}