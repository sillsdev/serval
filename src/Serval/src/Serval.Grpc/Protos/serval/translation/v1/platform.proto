syntax = "proto3";

package serval.translation.v1;

import "google/protobuf/empty.proto";
import "serval/translation/v1/common.proto";


service TranslationPlatformApi {
    rpc UpdateBuildStatus(UpdateBuildStatusRequest) returns (google.protobuf.Empty);
    rpc BuildStarted(BuildStartedRequest) returns (google.protobuf.Empty);
    rpc BuildCompleted(BuildCompletedRequest) returns (google.protobuf.Empty);
    rpc BuildCanceled(BuildCanceledRequest) returns (google.protobuf.Empty);
    rpc BuildFaulted(BuildFaultedRequest) returns (google.protobuf.Empty);
    rpc BuildRestarting(BuildRestartingRequest) returns (google.protobuf.Empty);

    rpc IncrementEngineCorpusSize(IncrementEngineCorpusSizeRequest) returns (google.protobuf.Empty);
    rpc InsertPretranslations(stream InsertPretranslationsRequest) returns (google.protobuf.Empty);
    rpc UpdateBuildExecutionData(UpdateBuildExecutionDataRequest) returns (google.protobuf.Empty);
    rpc UpdateCorpusAnalysis(UpdateCorpusAnalysisRequest) returns (google.protobuf.Empty);
}

message UpdateBuildStatusRequest {
    string build_id = 1;
    int32 step = 2;
    optional double progress = 3;
    optional string message = 4;
    optional int32 queue_depth = 5;
    repeated Phase phases = 6;
}

message BuildStartedRequest {
    string build_id = 1;
}

message BuildCompletedRequest {
    string build_id = 1;
    int32 corpus_size = 2;
    double confidence = 3;
}

message BuildCanceledRequest {
    string build_id = 1;
}

message BuildFaultedRequest {
    string build_id = 1;
    string message = 2;
}

message BuildRestartingRequest {
    string build_id = 1;
}

message IncrementEngineCorpusSizeRequest {
    string engine_id = 1;
    int32 count = 2;
}

message InsertPretranslationsRequest {
    string engine_id = 1;
    string corpus_id = 2;
    string text_id = 3;
    repeated string refs = 4;
    string translation = 5;
    repeated string source_tokens = 6;
    repeated string translation_tokens = 7;
    repeated AlignedWordPair alignment = 8;
}

message UpdateBuildExecutionDataRequest {
    string engine_id = 1;
    string build_id = 2;
    map<string, string> execution_data = 3;
}

message UpdateCorpusAnalysisRequest {
	string engine_id = 1;
	string build_id = 2;
	repeated CorpusAnalysisResult corpus_analysis = 3;
}

message CorpusAnalysisResult {
	string corpus_id = 1;
	string source_quote_convention = 2;
	string target_quote_convention = 3;
}

message Phase {
    PhaseStage stage = 1;
    optional int32 step = 2;
    optional int32 step_count = 3;
}

enum PhaseStage {
    PHASE_STAGE_TRAIN = 0;
    PHASE_STAGE_INFERENCE = 1;
}